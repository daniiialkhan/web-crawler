{"future_incompat_report":[{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":25247,"byte_end":25264,"line_start":696,"line_end":696,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":25247,"byte_end":25264,"line_start":696,"line_end":696,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":25773,"byte_end":25790,"line_start":707,"line_end":707,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":25773,"byte_end":25790,"line_start":707,"line_end":707,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":26233,"byte_end":26250,"line_start":717,"line_end":717,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":26233,"byte_end":26250,"line_start":717,"line_end":717,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":26703,"byte_end":26720,"line_start":727,"line_end":727,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":26703,"byte_end":26720,"line_start":727,"line_end":727,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":27307,"byte_end":27324,"line_start":738,"line_end":738,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":27307,"byte_end":27324,"line_start":738,"line_end":738,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":27994,"byte_end":28011,"line_start":751,"line_end":751,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m751\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":27994,"byte_end":28011,"line_start":751,"line_end":751,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m751\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":28370,"byte_end":28387,"line_start":760,"line_end":760,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m760\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":28370,"byte_end":28387,"line_start":760,"line_end":760,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m760\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":30121,"byte_end":30165,"line_start":799,"line_end":799,"column_start":26,"column_end":70,"is_primary":false,"text":[{"text":"                    c => go!(self: push_tag (c.to_ascii_lowercase())),","highlight_start":26,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m799\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_tag (c.to_ascii_lowercase())),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18422,"byte_end":18423,"line_start":577,"line_end":577,"column_start":93,"column_end":94,"is_primary":true,"text":[{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":93,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":30121,"byte_end":30165,"line_start":799,"line_end":799,"column_start":26,"column_end":70,"is_primary":false,"text":[{"text":"                    c => go!(self: push_tag (c.to_ascii_lowercase())),","highlight_start":26,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:577:93\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m799\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_tag (c.to_ascii_lowercase())),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":35720,"byte_end":35739,"line_start":917,"line_end":917,"column_start":28,"column_end":47,"is_primary":false,"text":[{"text":"                    '-' => go!(self: emit '-'),","highlight_start":28,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m917\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '-' => go!(self: emit '-'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":35720,"byte_end":35739,"line_start":917,"line_end":917,"column_start":28,"column_end":47,"is_primary":false,"text":[{"text":"                    '-' => go!(self: emit '-'),","highlight_start":28,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m917\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '-' => go!(self: emit '-'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23534,"byte_end":23553,"line_start":652,"line_end":652,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":37703,"byte_end":37782,"line_start":959,"line_end":960,"column_start":29,"column_end":61,"is_primary":false,"text":[{"text":"                            go_match!(self: c,","highlight_start":29,"highlight_end":47},{"text":"                            '\"' , '\\'' , '<' , '=' => error);","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23412,"byte_end":23581,"line_start":650,"line_end":655,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            '\"' , '\\'' , '<' , '=' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|____________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":20688,"byte_end":20689,"line_start":597,"line_end":597,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23534,"byte_end":23553,"line_start":652,"line_end":652,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":37703,"byte_end":37782,"line_start":959,"line_end":960,"column_start":29,"column_end":61,"is_primary":false,"text":[{"text":"                            go_match!(self: c,","highlight_start":29,"highlight_end":47},{"text":"                            '\"' , '\\'' , '<' , '=' => error);","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23412,"byte_end":23581,"line_start":650,"line_end":655,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:597:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            '\"' , '\\'' , '<' , '=' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|____________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":38490,"byte_end":38513,"line_start":976,"line_end":976,"column_start":37,"column_end":60,"is_primary":false,"text":[{"text":"                        Some(cl) => go!(self: push_name cl),","highlight_start":37,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m976\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Some(cl) => go!(self: push_name cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19221,"byte_end":19222,"line_start":584,"line_end":584,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":38490,"byte_end":38513,"line_start":976,"line_end":976,"column_start":37,"column_end":60,"is_primary":false,"text":[{"text":"                        Some(cl) => go!(self: push_name cl),","highlight_start":37,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:584:94\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m976\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Some(cl) => go!(self: push_name cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23534,"byte_end":23553,"line_start":652,"line_end":652,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":38577,"byte_end":38650,"line_start":978,"line_end":979,"column_start":29,"column_end":55,"is_primary":false,"text":[{"text":"                            go_match!(self: c,","highlight_start":29,"highlight_end":47},{"text":"                            '\"' , '\\'' , '<' => error);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23412,"byte_end":23581,"line_start":650,"line_end":655,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m978\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m979\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            '\"' , '\\'' , '<' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|______________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":20688,"byte_end":20689,"line_start":597,"line_end":597,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23534,"byte_end":23553,"line_start":652,"line_end":652,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":38577,"byte_end":38650,"line_start":978,"line_end":979,"column_start":29,"column_end":55,"is_primary":false,"text":[{"text":"                            go_match!(self: c,","highlight_start":29,"highlight_end":47},{"text":"                            '\"' , '\\'' , '<' => error);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23412,"byte_end":23581,"line_start":650,"line_end":655,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:597:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m978\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m979\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            '\"' , '\\'' , '<' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|______________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23534,"byte_end":23553,"line_start":652,"line_end":652,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":39446,"byte_end":39519,"line_start":997,"line_end":998,"column_start":29,"column_end":55,"is_primary":false,"text":[{"text":"                            go_match!(self: c,","highlight_start":29,"highlight_end":47},{"text":"                            '\"' , '\\'' , '<' => error);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23412,"byte_end":23581,"line_start":650,"line_end":655,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m997\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m998\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            '\"' , '\\'' , '<' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|______________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":20688,"byte_end":20689,"line_start":597,"line_end":597,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23534,"byte_end":23553,"line_start":652,"line_end":652,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":39446,"byte_end":39519,"line_start":997,"line_end":998,"column_start":29,"column_end":55,"is_primary":false,"text":[{"text":"                            go_match!(self: c,","highlight_start":29,"highlight_end":47},{"text":"                            '\"' , '\\'' , '<' => error);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23412,"byte_end":23581,"line_start":650,"line_end":655,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:597:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m997\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m998\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            '\"' , '\\'' , '<' => error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|______________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":40016,"byte_end":40045,"line_start":1010,"line_end":1010,"column_start":58,"column_end":87,"is_primary":false,"text":[{"text":"                    '\\t' | '\\n' | '\\r' | '\\x0C' | ' ' => go!(self: discard_char input),","highlight_start":58,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1010\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '\\t' | '\\n' | '\\r' | '\\x0C' | ' ' => go!(self: discard_char input),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18640,"byte_end":18641,"line_start":579,"line_end":579,"column_start":83,"column_end":84,"is_primary":true,"text":[{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":83,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":40016,"byte_end":40045,"line_start":1010,"line_end":1010,"column_start":58,"column_end":87,"is_primary":false,"text":[{"text":"                    '\\t' | '\\n' | '\\r' | '\\x0C' | ' ' => go!(self: discard_char input),","highlight_start":58,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:579:83\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m579\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1010\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '\\t' | '\\n' | '\\r' | '\\x0C' | ' ' => go!(self: discard_char input),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":41038,"byte_end":41061,"line_start":1027,"line_end":1027,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1027\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19336,"byte_end":19337,"line_start":585,"line_end":585,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":41038,"byte_end":41061,"line_start":1027,"line_end":1027,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:585:95\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m585\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1027\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":41104,"byte_end":41129,"line_start":1028,"line_end":1028,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1028\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19453,"byte_end":19454,"line_start":586,"line_end":586,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":41104,"byte_end":41129,"line_start":1028,"line_end":1028,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:586:98\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m586\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1028\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":41635,"byte_end":41658,"line_start":1038,"line_end":1038,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1038\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19336,"byte_end":19337,"line_start":585,"line_end":585,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":41635,"byte_end":41658,"line_start":1038,"line_end":1038,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:585:95\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m585\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1038\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":41701,"byte_end":41726,"line_start":1039,"line_end":1039,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1039\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19453,"byte_end":19454,"line_start":586,"line_end":586,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":41701,"byte_end":41726,"line_start":1039,"line_end":1039,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:586:98\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m586\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1039\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23534,"byte_end":23553,"line_start":652,"line_end":652,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":42494,"byte_end":42579,"line_start":1057,"line_end":1058,"column_start":25,"column_end":67,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' , '=' , '`' => error);","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23412,"byte_end":23581,"line_start":650,"line_end":655,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1057\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1058\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            '\"' , '\\'' , '<' , '=' , '`' => error);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|__________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":20688,"byte_end":20689,"line_start":597,"line_end":597,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23534,"byte_end":23553,"line_start":652,"line_end":652,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":42494,"byte_end":42579,"line_start":1057,"line_end":1058,"column_start":25,"column_end":67,"is_primary":false,"text":[{"text":"                        go_match!(self: c,","highlight_start":25,"highlight_end":43},{"text":"                            '\"' , '\\'' , '<' , '=' , '`' => error);","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go_match!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23412,"byte_end":23581,"line_start":650,"line_end":655,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! go_match ( ( $me:ident : $x:expr, $($pats:pat),+ => $($cmds:tt)* ) => (","highlight_start":1,"highlight_end":85},{"text":"    match $x {","highlight_start":1,"highlight_end":15},{"text":"        $($pats)|+ => go!($me: $($cmds)*),","highlight_start":1,"highlight_end":43},{"text":"        _ => (),","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"));","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:597:79\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m597\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1057\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        go_match!(self: c,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1058\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            '\"' , '\\'' , '<' , '=' , '`' => error);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|__________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go_match` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":42694,"byte_end":42719,"line_start":1061,"line_end":1061,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1061\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19453,"byte_end":19454,"line_start":586,"line_end":586,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":42694,"byte_end":42719,"line_start":1061,"line_end":1061,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:586:98\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m586\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1061\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":44798,"byte_end":44823,"line_start":1111,"line_end":1111,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19561,"byte_end":19562,"line_start":587,"line_end":587,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":44798,"byte_end":44823,"line_start":1111,"line_end":1111,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:587:92\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m587\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":47562,"byte_end":47615,"line_start":1172,"line_end":1172,"column_start":26,"column_end":79,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_name (c.to_ascii_lowercase())),","highlight_start":26,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_name (c.to_ascii_lowercase())),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":20144,"byte_end":20145,"line_start":592,"line_end":592,"column_start":105,"column_end":106,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":105,"highlight_end":106}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":47562,"byte_end":47615,"line_start":1172,"line_end":1172,"column_start":26,"column_end":79,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_name (c.to_ascii_lowercase())),","highlight_start":26,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:592:105\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m592\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_name (c.to_ascii_lowercase())),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":50216,"byte_end":50249,"line_start":1223,"line_end":1223,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":20247,"byte_end":20248,"line_start":593,"line_end":593,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":50216,"byte_end":50249,"line_start":1223,"line_end":1223,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:593:94\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m593\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":50768,"byte_end":50801,"line_start":1233,"line_end":1233,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":20247,"byte_end":20248,"line_start":593,"line_end":593,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":50768,"byte_end":50801,"line_start":1233,"line_end":1233,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:593:94\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m593\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":53196,"byte_end":53230,"line_start":1290,"line_end":1290,"column_start":29,"column_end":63,"is_primary":false,"text":[{"text":"                    '\\0' => go!(self: push_comment '\\u{fffd}'),","highlight_start":29,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '\\0' => go!(self: push_comment '\\u{fffd}'),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19561,"byte_end":19562,"line_start":587,"line_end":587,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":53196,"byte_end":53230,"line_start":1290,"line_end":1290,"column_start":29,"column_end":63,"is_primary":false,"text":[{"text":"                    '\\0' => go!(self: push_comment '\\u{fffd}'),","highlight_start":29,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:587:92\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m587\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '\\0' => go!(self: push_comment '\\u{fffd}'),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":53257,"byte_end":53282,"line_start":1291,"line_end":1291,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19561,"byte_end":19562,"line_start":587,"line_end":587,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":53257,"byte_end":53282,"line_start":1291,"line_end":1291,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:587:92\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m587\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":54363,"byte_end":54385,"line_start":1319,"line_end":1319,"column_start":26,"column_end":48,"is_primary":false,"text":[{"text":"                    c => go!(self: push_temp c),","highlight_start":26,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_temp c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18756,"byte_end":18757,"line_start":580,"line_end":580,"column_start":85,"column_end":86,"is_primary":true,"text":[{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":85,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":54363,"byte_end":54385,"line_start":1319,"line_end":1319,"column_start":26,"column_end":48,"is_primary":false,"text":[{"text":"                    c => go!(self: push_temp c),","highlight_start":26,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:580:85\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_temp c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":54830,"byte_end":54854,"line_start":1332,"line_end":1332,"column_start":28,"column_end":52,"is_primary":false,"text":[{"text":"                    ']' => go!(self: push_temp ']'),","highlight_start":28,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ']' => go!(self: push_temp ']'),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18756,"byte_end":18757,"line_start":580,"line_end":580,"column_start":85,"column_end":86,"is_primary":true,"text":[{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":85,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":54830,"byte_end":54854,"line_start":1332,"line_end":1332,"column_start":28,"column_end":52,"is_primary":false,"text":[{"text":"                    ']' => go!(self: push_temp ']'),","highlight_start":28,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:580:85\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ']' => go!(self: push_temp ']'),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":56210,"byte_end":56227,"line_start":1375,"line_end":1375,"column_start":67,"column_end":84,"is_primary":false,"text":[{"text":"                states::Data | states::RawData(states::Rcdata) => go!(self: emit c),","highlight_start":67,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::Data | states::RawData(states::Rcdata) => go!(self: emit c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18177,"byte_end":18178,"line_start":575,"line_end":575,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":56210,"byte_end":56227,"line_start":1375,"line_end":1375,"column_start":67,"column_end":84,"is_primary":false,"text":[{"text":"                states::Data | states::RawData(states::Rcdata) => go!(self: emit c),","highlight_start":67,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:575:76\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::Data | states::RawData(states::Rcdata) => go!(self: emit c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23354,"byte_end":23355,"line_start":644,"line_end":644,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":56275,"byte_end":56298,"line_start":1377,"line_end":1377,"column_start":46,"column_end":69,"is_primary":false,"text":[{"text":"                states::AttributeValue(_) => go!(self: push_value c),","highlight_start":46,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:644:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m644\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::AttributeValue(_) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":19336,"byte_end":19337,"line_start":585,"line_end":585,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21211,"byte_end":21237,"line_start":610,"line_end":610,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":23330,"byte_end":23354,"line_start":644,"line_end":644,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":56275,"byte_end":56298,"line_start":1377,"line_end":1377,"column_start":46,"column_end":69,"is_primary":false,"text":[{"text":"                states::AttributeValue(_) => go!(self: push_value c),","highlight_start":46,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21294,"byte_end":23410,"line_start":613,"line_end":648,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return ProcessResult::Continue;           });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return ProcessResult::Continue;      });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return ProcessResult::Continue;         });","highlight_start":1,"highlight_end":127},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return ProcessResult::Continue; });","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        return $me.emit_current_tag();","highlight_start":1,"highlight_end":39},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return ProcessResult::Suspend; });","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":21153,"byte_end":21242,"line_start":610,"line_end":610,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs","byte_start":18077,"byte_end":20840,"line_start":574,"line_end":599,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag                      ) => ( $me.discard_tag();                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char $input:expr         ) => ( $me.discard_char($input);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : force_quirks                     ) => ( $me.current_doctype.force_quirks = true;             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\mkdan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\html5ever-0.24.1\\src\\tokenizer\\mod.rs:585:95\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m585\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::AttributeValue(_) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
